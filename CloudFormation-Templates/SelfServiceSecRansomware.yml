AWSTemplateFormatVersion: 2010-09-09
Description: Cloudformation templates to create ransomware checks in the account. https://github.com/awslabs/aws-security-assessment-solution/
Parameters:
  InstanceRoleARN:
    Type: String
  SelfServiceSecS3Bucket:
    Type: String
  TemplatesS3Bucket:
    Type: String
Conditions:
  CreateGovCloudResources: !Equals [ !Ref "AWS::Partition", aws ]
# Currently two features are not supported in GovCloud so we omit these two checks below with this partition check.

Resources:
  libs:
    Type: AWS::Lambda::LayerVersion
    Properties:
      LayerName: boto3
      Description: Dependencies for the ransomware modules
      Content: 
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/boto3_layer.zip"
      CompatibleRuntimes:
        - python3.9
        - python3.8
        - python3.7

  rLambdaCheckForLogging:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_logging.py.zip"
      FunctionName: "LambdaCheckForLogging"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 256
      Layers:
        - !Ref libs
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 900
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForLogging:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForLogging.Arn

  rLambdaCheckForRoute53DNSFirewall:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_route53_dns_firewall.py.zip"
      FunctionName: "LambdaCheckForRoute53DNSFirewall"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Layers:
        - !Ref libs
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 600
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForRoute53DNSFirewall:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForRoute53DNSFirewall.Arn
  
  rLambdaCheckForUnusedAccessKeys:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_unused_access_keys.py.zip"
      FunctionName: "LambdaCheckForUnusedAccessKeys"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 600
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForUnusedAccessKeys:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForUnusedAccessKeys.Arn

#
  rLambdaCheckForDNSSEC:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_dnssec.py.zip"
      FunctionName: "LambdaCheckForDNSSEC"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Layers:
        - !Ref libs
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 600
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForDNSSEC:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForDNSSEC.Arn

#
  rLambdaCheckFor2k8:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_for_outdated_os.py.zip"
      FunctionName: "LambdaCheckFor2k8"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 90
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckFor2k8:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckFor2k8.Arn

  rLambdaCheckForBackups:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_backup.py.zip"
      FunctionName: "LambdaCheckForBackups"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 90
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForBackups:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForBackups.Arn

  rLambdaCheckForGuardDuty:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_guardduty.py.zip"
      FunctionName: "LambdaCheckForGuardDuty"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 90
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForGuardDuty:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForGuardDuty.Arn

  rLambdaCheckForEBSSnapshot:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_ebs_snapshots.py.zip"
      FunctionName: "LambdaCheckForEBSSnapShots"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 90
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForEBSSnapshot:
    Type: AWS::CloudFormation::CustomResource
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForEBSSnapshot.Arn

  rLambdaCheckForS3StaleAccess:
    Type: "AWS::Lambda::Function"
    Condition: CreateGovCloudResources
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_s3_stale_access.py.zip"
      FunctionName: "LambdaCheckForS3StaleAccess"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 180
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForS3StaleAccess:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateGovCloudResources
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForS3StaleAccess.Arn

  rLambdaCheckForSSMUse:
    Type: "AWS::Lambda::Function"
    Condition: CreateGovCloudResources
    Properties:
      Code:
        S3Bucket: !Ref TemplatesS3Bucket
        S3Key: "modules/RansomwareDetection/check_ssm_used.py.zip"
      FunctionName: "LambdaCheckForSSMUse"
      Handler: "lambda_function.lambda_handler"
      MemorySize: 128
      Role: !Ref InstanceRoleARN
      Runtime: "python3.8"
      Timeout: 90
      DeadLetterConfig: !Ref "AWS::NoValue"
      TracingConfig:
        Mode: "PassThrough"
      Environment:
        Variables:
          reportbucket: !Ref SelfServiceSecS3Bucket

  xLambdaCheckForSSMUse:
    Type: AWS::CloudFormation::CustomResource
    Condition: CreateGovCloudResources
    Properties:
      ServiceToken: !GetAtt rLambdaCheckForSSMUse.Arn